/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 *                                   2001-3-5                  *
 \***************************************************************/

package nc.impl.uap.sf;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import nc.bs.framework.common.NCLocator;
import nc.bs.logging.Logger;
import nc.bs.sm.createcorp.CreatecorpADO;
import nc.bs.sm.funcreg.FuncRegisterDMO;
import nc.bs.uap.sf.excp.SystemFrameworkException;
import nc.itf.uap.IUAPQueryBS;
import nc.itf.uap.sf.IFuncRegisterQueryService;
import nc.ui.sm.funcreg.FunRegisterConst;
import nc.ui.sm.nodepower.Util4Power;
import nc.vo.pub.BusinessException;
import nc.vo.sm.createcorp.CodetocodeVO;
import nc.vo.sm.createcorp.CreatecorpVO;
import nc.vo.sm.funcreg.DefMenuFuncVO;
import nc.vo.sm.funcreg.FuncModuleJudger;
import nc.vo.sm.funcreg.FuncRegisterVO;

/**
 * 功能权限注册的BO类 创建日期：(2001-4-10)
 * 
 * @author：张森
 * @修改人：朱俊彬
 */
public class FuncRegisterQueryImpl implements IFuncRegisterQueryService {

	/**
	 * FuncRegisterBO 构造子注解。
	 */
	public FuncRegisterQueryImpl() {
		super();
	}

	/**
	 * 通过主键获得VO对象。
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO
	 * @param key
	 *            String
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO findFuncRegisterVOByPrimaryKey(String key) throws SystemFrameworkException {

		FuncRegisterVO funcRegister = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegister = dmo.findByPrimaryKey(key);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBean::findByPrimaryKey(FuncRegisterPK) Exception!");
		}
		return funcRegister;
	}

	/**
	 * 如参数为null，查询全部功能节点+按钮信息 如参数非空，根据Where条件查询全部功能节点+按钮信息
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryAllFuncRegisterVOs(String strWhere) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			if (strWhere == null) {
				//modify by gxyy
				strWhere = " fun_code not like '60%' and fun_code not like '25%' and fun_code not like '40%'";
//				funcRegisters = dmo.queryAll(strWhere);
				funcRegisters = dmo.queryAllWhere(strWhere);
			}
			else
				funcRegisters = dmo.queryAllWhere(strWhere); // 新方法
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryAll(String) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryAllFuncNode(String unitCode) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryAllFuncNode(unitCode);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBean::queryAllFuncNode(int unitCode) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 查询某个可执行功能节点下所有注册的按钮
	 * 
	 * @author 雷军 2004-5-28
	 */
	public FuncRegisterVO[] queryBtnsBelongToFunc(String funId) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryBtnsBelongToFunc(funId);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBO::queryBtnsBelongToFunc(String funId) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 根据VO中所设定的条件返回所有符合条件的VO数组
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @param funcRegisterVO
	 *            nc.vo.sm.funcreg.FuncRegisterVO
	 * @param isAnd
	 *            boolean 以与条件查询还是以或条件查询
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryByFunCode(String funCode) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryByFunCode(funCode);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBean::queryByVO(FuncRegisterVO condFuncRegisterVO, boolean isAnd) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 通过功能编码查询needlog
	 * 创建日期：(2001-4-10)
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @param unitCode int
	 * @exception java.sql.SQLException 异常说明。
	 */
	public boolean queryIsNeedButtonLogByFunCode(String fun_code) throws SystemFrameworkException {
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			return dmo.queryIsNeedButtonLogByFunCode(fun_code);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBean::queryByVO(FuncRegisterVO condFuncRegisterVO, boolean isAnd) Exception!");
		}
	}

	/**
	 * 查询自定义菜单的节点数据
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @param funcRegisterVO
	 *            nc.vo.sm.funcreg.FuncRegisterVO
	 * @param isAnd
	 *            boolean 以与条件查询还是以或条件查询
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public DefMenuFuncVO[] queryDefMenuCode() throws SystemFrameworkException {

		DefMenuFuncVO[] defMenus = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			// 查询所有一级节点
			// String[] topCodes = dmo.queryTopCodeForDefMenu();
			// if (topCodes != null) {
			// int iLen = topCodes.length;
			// defMenus = new DefMenuFuncVO[iLen];
			// for (int i = 0; i < iLen; i++) {

			defMenus = new DefMenuFuncVO[1];
			// 查询某个一级节点下的子孙节点
			// FuncRegisterVO[] funcs = dmo.querySubFuncNode(topCodes[i]);
			FuncRegisterVO[] funcs = dmo.querySubFuncNode("");
			// 巅峰节点
			FuncRegisterVO voTop = new FuncRegisterVO();
			voTop.setPrimaryKey("");
			voTop.setFunCode("");
			voTop.setFunName(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("102005",
					"UPP102005-000000")/*
			 * @res "功能节点"
			 */);
			voTop.setFunProperty(new Integer(nc.ui.sm.funcreg.FunRegisterConst.INEXECUTABLE_FUNC_NODE));
			voTop.setDispCode("");
			voTop.setForbidFlag(new Integer(0));
			// 设置父节点
			defMenus[0] = new DefMenuFuncVO();
			defMenus[0].setParent(voTop);
			// 设置子孙节点
			// FuncRegisterVO[] childrenFuncs = new FuncRegisterVO[funcs.length
			// - 1];
			// System.arraycopy(funcs, 1, childrenFuncs, 0, funcs.length - 1);
			// defMenus[i].setChildren(childrenFuncs);
			defMenus[0].setChildren(funcs);
			// }
			// }
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryDefMenuCode() Exception!");
		}
		return defMenus;
	}

	/**
	 * 对应DMO中的相应方法
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @param funcRegisterVO
	 *            nc.vo.sm.funcreg.FuncRegisterVO
	 * @param isAnd
	 *            boolean 以与条件查询还是以或条件查询
	 * @exception java.sql.SQLException
	 *                异常说明。
	 */
	public String queryDsnByFunCode(String funCode) throws SystemFrameworkException {

		String dsName = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			dsName = dmo.queryDsnByFunCode(funCode);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryDsnByFunCode(String) Exception!");
		}
		return dsName;
	}

	/**
	 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryEnabled(String unitCode) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryEnabled(unitCode);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBean::queryEnabled(String) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryEnabled(String unitCode, boolean isButtonNeeded)
			throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryEnabled(unitCode, isButtonNeeded);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBean::queryEnabled(String, boolean) Exception!");
		}
		return funcRegisters;
	}

	/**
	 * 对应DMO的相应方法
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @param strWhere
	 *            String
	 * @修改：周善保2005-1-5，直接调用queryFuncWhere
	 * @deprecated
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryFuncWhereSimple(String strWhere) throws SystemFrameworkException {
		return queryFuncWhere(strWhere);
	}

	/**
	 * 调用对应DMO的queryFuncWhere方法 创建日期：2005-1-5
	 * 
	 * @author：周善保，UserPowerBO.queryFuncWhere移植出来，应该属于FuncRegisterBO
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryFuncWhere(String strWhere) throws SystemFrameworkException {
		FuncRegisterVO[] funcs = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcs = dmo.queryFuncWhere(strWhere);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryFuncWhere(String) Exception!");
		}
		return funcs;
	}

	/**
	 * 对应DMO的相应方法
	 * 
	 * 创建日期：(2001-4-10)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @param unitCode
	 *            int
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryTopEnabled(String unitCode) throws SystemFrameworkException {

		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryTopEnabled(unitCode);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryTopEnabled(String) Exception!");
		}
		return funcRegisters;
	}	

	/**
	 * 从UserPowerBO.queryAccountFunc移植出来，应该属于FuncRegisterBO
	 * 为集团用户分配权限时查询全部可分配的节点（非按钮）（非禁用） 创建日期：(2004-11-24)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryAccountFunc(boolean candobusi) throws SystemFrameworkException {
		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryAccountFunc(candobusi);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryAccountFunc() Exception!");
		}
		return funcRegisters;
	}
	
	public FuncRegisterVO[] queryAccountFunc() throws SystemFrameworkException {
		return queryAccountFunc(true);
	}
	
	

	/**
	 * 从UserPowerBO.queryAccountFuncForDesktop移植出来，应该属于FuncRegisterBO
	 * 查询帐套管理员的节点信息（非按钮）（非禁用） 调用帮助界面时调用，要包括公司级的节点 创建日期：(2004-11-24)
	 * 
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[]
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public FuncRegisterVO[] queryAccountFuncForDesktop() throws SystemFrameworkException {
		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryAccountFuncForDesktop();
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryAccountFuncForDesktop() Exception!");
		}
		return funcRegisters;
	}
	
	/**
	 * 查询帐套管理员的节点信息（非按钮）（非禁用） 调用帮助界面时调用，要包括公司级的节点，不包括轻量级节点
	 * @author guowl，2009-1-19
	 */
	public FuncRegisterVO[] queryAccountFuncForDesktopWithoutWebFunc() throws BusinessException {
		FuncRegisterVO[] funcRegisters = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			funcRegisters = dmo.queryAccountFuncForDesktopWithoutWebFunc();
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryAccountFuncForDesktopWithoutWebFunc() Exception!");
		}
		return funcRegisters;
	}

	private String getExecuateNodeInSql() {
		//构造in取值串0,5,6
		String str = FunRegisterConst.EXECUTABLE_FUNC_NODE + ","
				+ FunRegisterConst.EXECUTABLE_FUNC_FRAME + "," + FunRegisterConst.LFW_FUNC_NODE;
		return str;
	}

	/**
	 * 是否有指定组织类型的末级功能节点 创建日期：(2004-11-24)
	 * 
	 * @param sOrgType
	 *            组织类型
	 * @return boolean
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public boolean hasFuncNode4OrgType(String sOrgType) throws SystemFrameworkException {
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			// 判断给定节点是否存在
			String sWhere = " forbid_flag = 0 and fun_property in (" + getExecuateNodeInSql()
					+ ") and orgtypecode='" + sOrgType + "'";
			ArrayList alData = dmo.queryFuncnodeByWhere(sWhere);
			if (alData == null || alData.size() == 0) { return false; }
			return true;
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(
					"FuncRegisterBO::isHaveFuncNode4OrgType(String) Exception!");
		}
	}

	/**
	 * 节点是否有按钮
	 * 
	 * @param sFunid
	 * @return 为了减少流量,返回boolean,不再返回按钮集合
	 * @throws SystemFrameworkException
	 */
	public boolean hasButton4FuncNode(String sFunid) throws SystemFrameworkException {
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			FuncRegisterVO[] funcRegisters = dmo.queryBtnsBelongToFunc(sFunid);
			if (funcRegisters == null || funcRegisters.length == 0) { return false; }
			return true;
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::hasButton4FuncNode(String) Exception!");
		}
	}

	/**
	 * 查询指定可执行功能节点的参数（非禁用）。 创建日期：(2001-3-27)
	 * 
	 * @return nc.vo.user.UserVO
	 * @param key
	 *            nc.vo.pub.oid.OID
	 * @exception SystemFrameworkException
	 *                异常说明。
	 */
	public String[][] queryParameter(String corp, String funcCode) throws SystemFrameworkException {
		String[][] strParams = null;
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			FuncRegisterVO[] funcRegisters = dmo.queryParameter(corp, funcCode);
			if (funcRegisters != null) {
				strParams = new String[funcRegisters.length][2];
				for (int i = 0; i < funcRegisters.length; i++) {
					strParams[i][0] = funcRegisters[i].getFunName();
					strParams[i][1] = funcRegisters[i].getClassName();
				}
			}
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(e.getMessage());
		}
		return strParams;
	}

	public FuncRegisterVO[] getFuncButtonByParentFunc(String[] sParentFuncID)
			throws SystemFrameworkException {
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			return dmo.getFuncButtonByParentFunc(sParentFuncID, null, false);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(e.getMessage());
		}
	}

	public FuncRegisterVO[] queryCompanyFuncNodeByOrgType(String sCorpPK, String sOrgType)
			throws SystemFrameworkException {
		return queryFuncByOrgType(sCorpPK, sOrgType, false);
	}

	public FuncRegisterVO[] queryCompanyFuncByOrgType(String sCorpPK, String sOrgType)
			throws SystemFrameworkException {
		return queryFuncByOrgType(sCorpPK, sOrgType, true);
	}

	/**
	 * @param sCorpPK 公司pk
	 * @param sOrgType 组织类型
	 * @param bIncludeButton,是否包括按钮，如果包括按钮，则要查找功能节点的所有可用按钮
	 * @return nc.vo.sm.funcreg.FuncRegisterVO[] 查到的VO对象数组
	 * @author 周善保 2006-03-20
	 */
	private FuncRegisterVO[] queryFuncByOrgType(String sCorpPK, String sOrgType,
			boolean bIncludeButton) throws SystemFrameworkException {
		FuncRegisterVO[] funcRegisters = null;
		ArrayList alResult = new ArrayList();
		try {
			CreatecorpVO[] createCorps = new CreatecorpADO().queryAll(sCorpPK);
			if (createCorps == null || createCorps.length == 0)
				return null;//说明该公司没有建帐
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			//1 查询可执行节点(即末级功能节点、非集团私有)
			HashMap mapCodetocode = getCodeToCodeMap();
			String sWhere = "("
					+ FuncModuleJudger.getSqlWhereByCreateCorp(mapCodetocode, createCorps, "fun_code")
					+ ") and forbid_flag = 0 and fun_property in (" + getExecuateNodeInSql()
					+ ") and group_flag <> 1 ";
			if (sOrgType != null)//sOrgType为null表示复合类型，即表示不区分组织类型
				sWhere += " and orgtypecode='" + sOrgType + "'";
			ArrayList alData = dmo.queryFuncnodeByWhere(sWhere);
			if (alData.size() == 0) { return null; }
			FuncRegisterVO[] voTmp = new FuncRegisterVO[alData.size()];
			alData.toArray(voTmp);
			Util4Power.sortByDispcode(voTmp);//按照dispcode排序
			alData = new ArrayList(Arrays.asList(voTmp));

			//2 查询虚节点
			alResult = (ArrayList) alData.clone();//由于ArrayList不允许浏览状态下修改列表
			sWhere = " forbid_flag = 0 and fun_property=1";
			ArrayList alMiddleNode = dmo.queryFuncnodeByWhere(sWhere);
			voTmp = new FuncRegisterVO[alMiddleNode.size()];
			alMiddleNode.toArray(voTmp);
			Util4Power.sortByDispcode(voTmp);//按照dispcode排序
			alMiddleNode = new ArrayList(Arrays.asList(voTmp));

			//3 还要过滤掉没有末级功能节点的虚节点,根据disp_code比较，并且都按照disp_code排了序
			Iterator itData = alData.iterator();
			Iterator itMiddle = alMiddleNode.iterator();
			int i = 0;
			FuncRegisterVO voData = (FuncRegisterVO) itData.next();
			FuncRegisterVO voMiddle = (FuncRegisterVO) itMiddle.next();
			while (true) {
				if (voData.getDispCode().startsWith(voMiddle.getDispCode())) {
					//加入中间结点
					alResult.add(i, voMiddle);
					i++;
					if (itMiddle.hasNext()) {
						voMiddle = (FuncRegisterVO) itMiddle.next();
					} else {
						break;
					}
				} else {
					int iComp = voData.getDispCode().compareTo(voMiddle.getDispCode());
					if (iComp < 0) {
						//功能节点下移
						if (itData.hasNext()) {
							i++;
							voData = (FuncRegisterVO) itData.next();
						} else {
							break;
						}
					} else {
						//中间结点下移
						if (itMiddle.hasNext()) {
							voMiddle = (FuncRegisterVO) itMiddle.next();
						} else {
							break;
						}
					}
				}
			}

			if (bIncludeButton) {
				//查询功能节点下的所有按钮
				HashSet hsFuncIds = new HashSet<String>();
				HashMap mapFuncid_funcvo = new HashMap(alData.size());
				FuncRegisterVO frVO = null;
				for (i = 0; i < alData.size(); i++) {
					frVO = (FuncRegisterVO) alData.get(i);
					if (frVO.getIsbuttonpower().booleanValue())
						//XXX:leijun如果该节点启用按钮权限控制
						hsFuncIds.add(frVO.getPrimaryKey());
					mapFuncid_funcvo.put(frVO.getPrimaryKey(), frVO);
				}
				if (hsFuncIds.size() > 0) {
					FuncRegisterVO[] voButn = new FuncRegisterDMO().getFuncButtonByParentFunc(
							(String[]) hsFuncIds.toArray(new String[hsFuncIds.size()]), mapFuncid_funcvo, false);
					if (voButn != null)
						alResult.addAll(Arrays.asList(voButn));
				}
			}
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException(e.getMessage());
		}
		if (alResult.size() > 0) {
			funcRegisters = new FuncRegisterVO[alResult.size()];
			alResult.toArray(funcRegisters);
		}
		return funcRegisters;
	}

	/*
	 * 查询模块编码映射
	 */
	private HashMap getCodeToCodeMap() throws BusinessException {
		HashMap mapCodeTocode = new HashMap();
		IUAPQueryBS iUAPQueryBS = (IUAPQueryBS) NCLocator.getInstance().lookup(
				IUAPQueryBS.class.getName());
		Collection c = iUAPQueryBS.retrieveByClause(CodetocodeVO.class, "1=1", new String[] {
				"funccode", "subfunccode", "isleaf" });
		if (c == null || c.size() == 0) { return mapCodeTocode; }
		CodetocodeVO voTmp = null;
		for (Iterator iter = c.iterator(); iter.hasNext();) {
			voTmp = (CodetocodeVO) iter.next();
			mapCodeTocode.put(voTmp.getFunccode(), voTmp);
		}
		return mapCodeTocode;
	}

	public ArrayList queryFuncnodeByWhere(String strWhere) throws SystemFrameworkException {
		try {
			FuncRegisterDMO dmo = new FuncRegisterDMO();
			return dmo.queryFuncnodeByWhere(strWhere);
		} catch (Exception e) {
			Logger.error("Error", e);
			throw new SystemFrameworkException("FuncRegisterBO::queryFuncnodeByWhere(String) Exception!");
		}
	}
}